from collections import defaultdict, OrderedDict

class LFUCache:
    def __init__(self, capacity):
        self.capacity = capacity
        self.min_freq = 0
        self.key_val = {}
        self.key_freq = {}
        self.freq_keys = defaultdict(OrderedDict)

    def _update_freq(self, key):
        freq = self.key_freq[key]
        self.freq_keys[freq].pop(key)
        if not self.freq_keys[freq]:
            del self.freq_keys[freq]
            if freq == self.min_freq:
                self.min_freq += 1
        self.key_freq[key] += 1
        self.freq_keys[freq + 1][key] = None

    def get(self, key):
        if key not in self.key_val:
            return -1
        self._update_freq(key)
        return self.key_val[key]

    def put(self, key, value):
        if self.capacity == 0:
            return
        if key in self.key_val:
            self.key_val[key] = value
            self._update_freq(key)
        else:
            if len(self.key_val) >= self.capacity:
                # Remove least frequently used
                k, _ = self.freq_keys[self.min_freq].popitem(last=False)
                del self.key_val[k]
                del self.key_freq[k]
            self.key_val[key] = value
            self.key_freq[key] = 1
            self.freq_keys[1][key] = None
            self.min_freq = 1

# Example
lfu = LFUCache(2)
lfu.put(1, 1)
lfu.put(2, 2)
print(lfu.get(1))  # 1
lfu.put(3, 3)      # removes key 2
print(lfu.get(2))  # -1
